@page "/"

@using ScribanEmailTemplateBuilder.Models
@using ScribanEmailTemplateBuilder.Services

<PageTitle>Home</PageTitle>
@rendermode InteractiveServer
@inject IScribanTemplateRendering ScribanTemplateRendering

<h1 class="my-2">Scriban + Blazor: Email Template Builder</h1>

<div class="mt-8 container">
    <div class="row">
        <div class="col-md-6">
            <h3>Template</h3>
            <textarea @bind="TemplateContent" rows="10" class="form-control"></textarea>
            <i>can customize email-template.html file: use scriban template like {{ subject }} or {{date}}</i>
        </div>
        <div class="col-md-6">
            <h3>Data</h3>
            <div class="form-group">
                <label for="recipients">Recipients:</label>
                <select id="recipients" multiple class="form-control" @onchange="OnRecipientsChange">
                    @foreach (var recipient in AvailableRecipients)
                    {
                        <option value="@recipient">@recipient</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="subject">Subject:</label>
                <input id="subject" @bind="EmailData.Subject" class="form-control" />
            </div>
            <div class="form-group">
                <label for="message">Message:</label>
                <textarea id="message" @bind="EmailData.Message" rows="5" class="form-control"></textarea>
            </div>
            <div class="form-group">
                <label for="date">Date:</label>
                <input id="date" type="date" @bind="EmailData.Date" class="form-control" />
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-12">
            <button class="btn btn-primary" @onclick="GenerateEmail">Generate Email</button>
        </div>
    </div>

</div>
@if (!string.IsNullOrEmpty(GeneratedEmail))
{
    <div class="row mt-3">
        <div class="col-md-12">
            @* <h3>Generated Email</h3> *@
            <div class="p-3">
                @((MarkupString)GeneratedEmail)
            </div>
        </div>
    </div>
}
@code {

    private EmailDataModel EmailData { get; set; } = new();


    private string TemplateContent { get; set; } = "";
    private string GeneratedEmail { get; set; } = "";
    private List<string> AvailableRecipients { get; set; } = [];

    private List<string> SelectedRecipients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        string templatePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "email-template.html");
        TemplateContent = await File.ReadAllTextAsync(templatePath);
       
        
        // fetch from db
        AvailableRecipients = [
        "user1@example.com",
        "user2@example.com",
        "user3@example.com",
        "user4@example.com"];
    }

    private void OnRecipientsChange(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            EmailData.Recipients = (e.Value as string[]).ToList();
        }
    }

    private async Task GenerateEmail()
    {
        try
        {
            
            var model = new
            {
                subject = EmailData.Subject,
                recipient_name = string.Join(", ", EmailData.Recipients),
                message = EmailData.Message,
                date = EmailData.Date,
                year = DateTime.Now.Year, 
                cta_link = "/cta-link",
                cta_text = "Check",
                sender_name = "Sender Name",
                company_name = "Your Company Name",
                unsubscribe_link = "/unsubscribe-link",
                privacy_policy_link = "/privacy-policy"
            };

            var scriptObject = new ScriptObject();
            scriptObject.Import(model);

            scriptObject.Add("format_date", new Func<DateTime, string>(date => date.ToString("dd MMMM, yyyy")));
              
           GeneratedEmail =  await ScribanTemplateRendering.Render(TemplateContent, scriptObject);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating email: {ex.Message}");
        }
    }
}
